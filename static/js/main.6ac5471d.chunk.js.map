{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","getReorderedGoods","goods","sortType","isReversed","visibleGoods","sort","el1","el2","localeCompare","length","reverse","App","useState","setReversed","NONE","setSortType","className","type","ALPHABET","onClick","LENGTH","style","display","map","el","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAeK,SAASC,EACdC,EADK,GAGJ,IADCC,EACF,EADEA,SAAUC,EACZ,EADYA,WAGNC,EAAY,YAAOH,GAuBzB,OApBAG,EAAaC,MAAK,SAACC,EAAKC,GACtB,OAAQL,GACN,KAAK,EASL,QACE,OAAO,EAPT,KAAK,EACH,OAAOI,EAAIE,cAAcD,GAE3B,KAAK,EACH,OAAOD,EAAIG,OAASF,EAAIE,WAO1BN,GACFC,EAAaM,UAGRN,G,SAxCJN,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KA2CE,IAAMa,EAAgB,WAC3B,MAAkCC,oBAAS,GAA3C,mBAAOT,EAAP,KAAmBU,EAAnB,KACA,EAAgCD,mBAASd,EAASgB,MAAlD,mBAAOZ,EAAP,KAAiBa,EAAjB,KAmBA,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,yBAAoBd,IAAaJ,EAASoB,SAAW,GAAK,YACnEC,QAVmB,WACzBJ,EAAYjB,EAASoB,WAMjB,iCAQA,wBACED,KAAK,SACLD,UAAS,4BAAuBd,IAAaJ,EAASsB,OAAS,GAAK,YACpED,QAtBa,WACnBJ,EAAYjB,EAASsB,SAkBjB,4BAQA,wBACEH,KAAK,SACLD,UAAS,4BAAuBb,EAAa,GAAK,YAClDgB,QAvCS,WACfN,GAAaV,IAmCT,qBAQA,wBACEc,KAAK,SACLD,UAAU,4BACVG,QA3CM,WACZN,GAAY,GACZE,EAAYjB,EAASgB,OA0CfO,MAAOnB,IAAaJ,EAASgB,OACT,IAAfX,EAAuB,CAAEmB,QAAS,QAAW,GALpD,sBAWF,6BACGtB,EAAkBD,EAAiB,CAAEG,WAAUC,eAC7CoB,KAAI,SAAAC,GAAE,OACL,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YCvHpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6ac5471d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render method to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  // Sort and reverse goods if needed\n  visibleGoods.sort((el1, el2) => {\n    switch (sortType) {\n      case 0:\n        return 0;\n\n      case 1:\n        return el1.localeCompare(el2);\n\n      case 2:\n        return el1.length - el2.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const reversed = () => {\n    setReversed(!isReversed);\n  };\n\n  const reset = () => {\n    setReversed(false);\n    setSortType(SortType.NONE);\n  };\n\n  const sortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const sortAlphabetically = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info ${sortType === SortType.ALPHABET ? '' : 'is-light'}`}\n          onClick={sortAlphabetically}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success ${sortType === SortType.LENGTH ? '' : 'is-light'}`}\n          onClick={sortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning ${isReversed ? '' : 'is-light'}`}\n          onClick={reversed}\n        >\n          Reverse\n        </button>\n\n        <button\n          type=\"button\"\n          className=\"button is-danger is-light\"\n          onClick={reset}\n          style={sortType === SortType.NONE\n            && isReversed === false ? { display: 'none' } : {}}\n        >\n          Reset\n        </button>\n      </div>\n\n      <ul>\n        {getReorderedGoods(goodsFromServer, { sortType, isReversed })\n          .map(el => (\n            <li data-cy=\"Good\" key={el}>\n              {el}\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}